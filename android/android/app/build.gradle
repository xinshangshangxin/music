apply plugin: 'com.android.application'

def getProperties = {
    Properties properties = new Properties()

    if(file('../local.properties').exists()) {
        InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
        properties.load(inputStream)
    } else {
        project.logger.lifecycle('处理 环境 变量')
        project.logger.lifecycle(System.getenv("KEYSTORE_FILE_PATH"))
        project.logger.lifecycle(System.getenv("STORE_PASSWORD"))
        project.logger.lifecycle(System.getenv("KEY_PASSWORD"))
        project.logger.lifecycle(System.getenv("KEY_ALIAS"))

        properties.setProperty('storeFile', System.getenv("KEYSTORE_FILE_PATH"))
        properties.setProperty('storePassword', System.getenv("STORE_PASSWORD"))
        properties.setProperty('keyPassword', System.getenv("KEY_PASSWORD"))

        if (System.getenv('KEY_ALIAS')) {
            properties.setProperty('keyAlias', System.getenv("KEY_ALIAS"))
        }
    }

    if (properties.getProperty('keyAlias') == null) {
        properties.setProperty('keyAlias', 'debug')
    }

    return properties
}

android {
    def properties = getProperties()

    signingConfigs {
        debug {
            storeFile file(properties.getProperty('storeFile'))
            storePassword properties.getProperty('storePassword')
            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword')
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.shang.highMusic"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            debuggable true
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')

    implementation 'androidx.core:core:1.3.1'
    implementation 'androidx.media:media:1.2.0'
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
